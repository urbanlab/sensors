#!/usr/bin/env ruby

require 'sense/daemon'
require 'sense/serial'
require 'logger'
require 'optparse'

# Launch the daemon
#
def launch
	trap(:INT){$log.info "Exiting"; exit 0}
	restore_state

	$redis.on_new_sensor do |multi, pin, function, period, *options|
		$serial.add_task(multi, pin, function, period, *options)
	end

	$redis.on_new_actuator do |id_multi, actu, config|
	#rien Ã  faire ?
		true
	end

	$redis.on_deleted_sensor do |id_multi, sensor|
		ans = $serial.rem_task(id_multi, sensor)
		next true if (ans == true) or (ans == false) # If the tasks didn't exist (ans == false), should remove it from redis
		next nil                                     # If the multi didn't answer (ans == nil) should not remove it and try another
	end

	$redis.on_deleted_actuator do |id_multi, actuator|
		ans = $serial.rem_task(id_multi, actuator)
		next true if (ans == true) or (ans == false) #delete from redis only if the task is no more running
		next nil
	end

	$redis.on_actuator_state do |multi, pin, value|
		case value.to_i
			when 1
				config = $redis.get_config(:actuator, multi, pin)
				profile = $redis.get_profile(:actuator, config[:profile])
				if (not (config && profile))
					$log.warn("A client tried to switch on an actuator without config or profile")
					next false
				end
				period = config[:period] || profile[:period] || 0
				$serial.add_task(multi, pin, profile[:function], period)
			else 
				$serial.rem_task(multi, pin)
		end
	end

	$redis.on_taken do |id_multi|
		$serial.reset(id_multi)
	end
	
	$serial.on_new_multi do |id|
		config = $redis.get_multi_config(id)
		if (id == 0 or id == 255)  # Unconfigured, bad id
			new_id = $redis.get_unassigned_id
			if $serial.change_id(id, new_id)
				$redis.set_multi_config(new_id, {network: 0, description: "no_name", supported: $serial.list_implementations(new_id)})
			end
		elsif (not ($redis.knows_multi? id))   # valid id, but not registered
			$redis.set_multi_config(id, {network: 0, description: "no_name", supported: $serial.list_implementations(id)})
		elsif (config[:network]) == $network # registered multiplexer on my network
			restore_multi_state id
		end
	end

	$serial.on_sensor_value do |id_multi, sensor, value|
		$redis.publish_value(id_multi, sensor, value)
	end
	$redis.process_messages
end

# Restore the state of the multiplexers from the database
#
def restore_state
	$log.info("Restoring state from database...")
	$redis.list_multis.each do |id_multi, config|
		restore_multi_state id_multi
	end
	$log.info("Restoration complete.")
end

# Restore the state of a multiplexer from the database
#	
def restore_multi_state multi_id
	config = $redis.get_multi_config(multi_id)
	if not config
		$log.error("The database has a multi (#{multi_id}) without valid config")
		return false unless config
	end
	
	if ($serial.ping multi_id)
		$redis.list(:sensor, multi_id).each do |pin, sensor_config|
			profile = $redis.get_profile(:sensor, sensor_config[:profile])
			if not config
				$log.error("The database has a sensor (#{multi_id}:#{pin}) with unknown profile")
				return false
			end
			period = sensor_config[:period] || profile[:period] || 0
			$serial.add_task(multi_id, pin, profile[:function], period, *[profile[:option1], profile[:option2]])
		end
		return true
	else
		$log.info "Multiplexer #{multi_id} seems to be out of sight."
		return nil
	end
end

options = {}

opts = OptionParser.new do |opts|
	opts.banner = "Usage: daemon-xbee.rb [options] network"
	
	opts.on("-l", "--logfile FILE", "Log to given FILE (default : stderr)") do |file|
		if file == "stdout" or file == "stderr"
			options[:logfile] = {"stdout" => STDOUT, "stderr" => STDERR}[file]
		else
			options[:logfile] = file
		end		
	end
	
	opts.on("-L", "--log-level LEVEL", {"debug" => 0, "info" => 1, "warn" => 2, "error" => 3, "fatal" => 4, "unknown" => 5}, "Verbosity of the logger (can be debug, info, warn, error, fatal or unknown, default info)") do |level|
		options[:level] = level
	end
	
	opts.on("-p", "--serial-port PORT", "Port where the receiver is plugged (will try any /dev/ttyUSB* by default)") do |serial|
		options[:serial_port] = serial
	end
	
	opts.on("-H", "--redis-host HOST", "Host where Redis is running (default : localhost)") do |host|
		options[:redis_host] = host
	end
	
	opts.on("-r", "--redis-port PORT", Integer, "Port where Redis is listening (default : 6379)") do |port|
		options[:redis_port] = port.to_i
	end
	
	opts.on("-s", "--log-size SIZE", Integer, "Maximum logfile size (default : 1048576)") do |size|
		options[:size] = size
	end
	
	opts.on('-h', '--help', 'Show this message') do
		puts opts
		exit
	end
end

if ARGV.size == 0
	puts opts
	exit
end

opts.parse!

if ARGV.size == 1 && ARGV[0].is_integer?
	$network = ARGV[0].to_i
else
	puts "Network must be given and be an integer"
	exit 1
end
Process.daemon true, true unless options[:logfile] == STDOUT
puts "[#{Process.pid}]"

Thread.abort_on_exception = true
begin
	$log = Logger.new(options[:logfile], 0, options[:size])
rescue Exception => e
	puts "WARNING : could not open logfile, nothing will be logged"
	$log = Logger.new(nil)
end

$log.level = options[:level] || 1
$log.datetime_format = "%Y-%m-%d %H:%M:%S"
$log.info("Starting daemon")
begin
	$redis = Sense::Daemon.new($network, options[:redis_host], options[:redis_port], $log)
	$serial = Sense::Serial.new(options[:serial_port], $log)
rescue Errno::ECONNREFUSED => e
	$log.fatal("Could not connect to Redis, exiting... error : #{e.message}")
	exit
rescue Errno::ENOENT => e
	$log.fatal("Could not find receiver, exiting... error : #{e.message}")
	exit
end

launch

